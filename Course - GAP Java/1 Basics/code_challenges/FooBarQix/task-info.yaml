type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 69
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 69
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (i % 3 == 0) s += "Foo";
          if (i % 5 == 0) s += "Bar";
          if (i % 7 == 0) s += "Qix";

          char[] digits = String.valueOf(i).toCharArray();
          for (char digit : digits) {

            if (digit == '3') s += "Foo";
            if (digit == '5') s += "Bar";
            if (digit == '7') s += "Qix";

          }

          if (s.isEmpty()) {
            s = String.valueOf(i);
          }
  - offset: 69
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 69
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      boolean isDivisible = false;
          if (i % 3 == 0) {
            s += "Foo";
            isDivisible = true;
          }
          if (i % 5 == 0) {
            s += "Bar";
            isDivisible = true;
          }
          if (i % 7 == 0) {
            s += "Qix";
            isDivisible = true;
          }

          char[] digits = String.valueOf(i).toCharArray();
          for (char digit : digits) {

            if (digit == '3') s += "Foo";
            else if (digit == '5') s += "Bar";
            else if (digit == '7') s += "Qix";
            else if (digit == '0') s += "*";
            else if (!isDivisible) s += digit;
          }
  text: |-
    class Task {
      public String compute(int i) {
        String s = "";
        /*TODO*/
          else if (digit == '0') s += "*";
          else if (!isDivisible) s += digit;
        }

        return s;
      }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |-
    import org.junit.Assert;

    import java.util.Map;

    import static java.util.Map.entry;

    public class Test {
      public static Map<Integer, String> stage1 = Map.ofEntries(
              entry(1, "1"),
              entry(2, "2"),
              entry(3, "FooFoo"),
              entry(4, "4"),
              entry(5, "BarBar"),
              entry(6, "Foo"),
              entry(7, "QixQix"),
              entry(8, "8"),
              entry(9, "Foo"),
              entry(10, "Bar"),
              entry(13, "Foo"),
              entry(15, "FooBarBar"),
              entry(21, "FooQix"),
              entry(33, "FooFooFoo"),
              entry(51, "FooBar"),
              entry(53, "BarFoo")
      );

      public static Map<Integer, String> stage2 = Map.ofEntries(
              entry(101, "1*1"),
              entry(303, "FooFoo*Foo"),
              entry(105, "FooBarQix*Bar"),
              entry(10101, "FooQix**")
      );

      @org.junit.Test
      public void stage1() {
        Task task = new Task();
        for (Map.Entry<Integer, String> entry : stage1.entrySet()) {
          Integer input = entry.getKey();
          String actual = task.compute(entry.getKey());
          String expected = entry.getValue();
          Assert.assertEquals("for input: "+ input, expected, actual);
        }
      }

      @org.junit.Test
      public void stage2() {
        Task task = new Task();
        for (Map.Entry<Integer, String> entry : stage2.entrySet()) {
          Integer input = entry.getKey();
          String actual = task.compute2(entry.getKey());
          String expected = entry.getValue();
          Assert.assertEquals("for input: "+ input, expected, actual);
        }
      }
    }
  learner_created: false
status: Unchecked
record: -1
