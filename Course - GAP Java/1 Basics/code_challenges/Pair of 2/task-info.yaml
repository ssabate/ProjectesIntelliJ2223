type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 89
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 89
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      Integer[] indexesIncludedInPairs = new Integer[numbers.length];
          int nrOfIndexesIncludedInPairs = 0;

          for (int i = 0; i < numbers.length - 1; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
              boolean indexesIncludedInOtherPairs = false;
              for (int k = 0; k < nrOfIndexesIncludedInPairs; k++) {
                if (indexesIncludedInPairs[k] == i || indexesIncludedInPairs[k] == j) {
                  indexesIncludedInOtherPairs = true;
                }
              }
              if (!indexesIncludedInOtherPairs && (numbers[i] + numbers[j] == 0)) {
                indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = i;
                indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = j;
                pairs++;
                System.out.println(numbers[i] + " + " + numbers[j] + " + " + " = " + 0);
                break;
              }
            }
          }
  text: |-
    class Task {
      public Integer countPairs(Integer[] numbers) {
        Integer pairs = 0;
        /*TODO*/
        return pairs;
      }

    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |-
    import org.junit.Assert;

    import java.util.Arrays;
    import java.util.Map;

    import static java.util.Map.entry;

    public class Test {
      public static Map<Integer[], Integer> data = Map.ofEntries(
              entry(new Integer[]{3, 2, -3, -2, 3, 0}, 2),
              entry(new Integer[]{1, 1, 0, -1, -1}, 2),
              entry(new Integer[]{5, 9, -5, 7, -5}, 1)
      );

      @org.junit.Test
      public void test() {
        Task task = new Task();
        for (Map.Entry<Integer[], Integer> entry : data.entrySet()) {
          Integer[] input = entry.getKey();
          Integer expected = entry.getValue();
          Integer actual = task.countPairs(input);
          Assert.assertEquals("for input: " + Arrays.asList(input), expected, actual);
        }
      }
    }
  learner_created: false
status: Unchecked
record: -1
